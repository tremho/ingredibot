{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"git@github.com:tremho/ingredibot.git","branch_name":"main","objects":[{"comment":"/**\n* Load a DB record by fdcId\n*\n* @param {string} fdcId\n* @return {Promise<DBInfo>} Promise resolves with DB_Info data or null.\n*/","meta":{"range":[2700,3508],"filename":"Ingredibot_DB.js","lineno":71,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000221","name":"loadData","type":"FunctionDeclaration","paramnames":["fdcId"]},"vars":{"":null}},"description":"Load a DB record by fdcId","params":[{"type":{"names":["string"]},"name":"fdcId"}],"returns":[{"type":{"names":["Promise.<DBInfo>"]},"description":"Promise resolves with DB_Info data or null."}],"name":"loadData","longname":"loadData","kind":"function","scope":"global"},{"comment":"/**\n* Saves the DB_Info data in the bucket under its fdcId\n*\n* @param data\n*/","meta":{"range":[3591,4298],"filename":"Ingredibot_DB.js","lineno":99,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000312","name":"saveData","type":"FunctionDeclaration","paramnames":["data"]},"vars":{"str":"saveData~str","":null}},"description":"Saves the DB_Info data in the bucket under its fdcId","params":[{"name":"data"}],"name":"saveData","longname":"saveData","kind":"function","scope":"global"},{"comment":"/**\n* Load the DB index\n*\n* @return {Promise<IndexEntry[]>} Promise resolves with an array of IndexEntry items or null\n*/","meta":{"range":[4425,5336],"filename":"Ingredibot_DB.js","lineno":129,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000419","name":"loadIndex","type":"FunctionDeclaration","paramnames":[]},"vars":{"":null}},"description":"Load the DB index","returns":[{"type":{"names":["Promise.<Array.<IndexEntry>>"]},"description":"Promise resolves with an array of IndexEntry items or null"}],"name":"loadIndex","longname":"loadIndex","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Persist the index to storage.\n* will write to the cloud if we are beyond our minimum update interval\n* Should be called on any index update\n* Should be called with force=true at app close\n* @param force\n* @return {Promise} should not proceed until promise resolves.\n*/","meta":{"range":[5650,6656],"filename":"Ingredibot_DB.js","lineno":165,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000531","name":"updateIndex","type":"FunctionDeclaration","paramnames":["force"]},"vars":{"cachedIndex":"updateIndex~cachedIndex","since":"updateIndex~since","doUpdate":"updateIndex~doUpdate","":null}},"description":"Persist the index to storage.\nwill write to the cloud if we are beyond our minimum update interval\nShould be called on any index update\nShould be called with force=true at app close","params":[{"name":"force"}],"returns":[{"type":{"names":["Promise"]},"description":"should not proceed until promise resolves."}],"name":"updateIndex","longname":"updateIndex","kind":"function","scope":"global"},{"comment":"/**\n* Turns the cachedIndex array into map\n*/","meta":{"range":[6705,6850],"filename":"Ingredibot_DB.js","lineno":200,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000655","name":"makeIndexMap","type":"FunctionDeclaration","paramnames":[]},"vars":{"indexMap":"makeIndexMap~indexMap","":null}},"description":"Turns the cachedIndex array into map","name":"makeIndexMap","longname":"makeIndexMap","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Call at start to establish index\n*/","meta":{"range":[6895,6996],"filename":"Ingredibot_DB.js","lineno":209,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000680","name":"setup","type":"FunctionDeclaration","paramnames":[]},"vars":{"":null}},"description":"Call at start to establish index","name":"setup","longname":"setup","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Get an ingredient from our index, if it's there\n* @param {string} type  Name of the ingredient\n* @return {DB_Info | undefined}  the record we have in stare for this ingredient\n*/","meta":{"range":[7209,7272],"filename":"Ingredibot_DB.js","lineno":220,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000700","name":"getIngredient","type":"FunctionDeclaration","paramnames":["type"]}},"description":"Get an ingredient from our index, if it's there","params":[{"type":{"names":["string"]},"description":"Name of the ingredient","name":"type"}],"returns":[{"type":{"names":["DB_Info","undefined"]},"description":"the record we have in stare for this ingredient"}],"name":"getIngredient","longname":"getIngredient","kind":"function","scope":"global"},{"comment":"/**\n*\n* @param {DB_Info} info  The Zestful parsed data for this ingredient\n*/","meta":{"range":[7393,9396],"filename":"Ingredibot_DB.js","lineno":228,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000716","name":"makeNewEntry","type":"FunctionDeclaration","paramnames":["info"]},"vars":{"":null}},"params":[{"type":{"names":["DB_Info"]},"description":"The Zestful parsed data for this ingredient","name":"info"}],"name":"makeNewEntry","longname":"makeNewEntry","kind":"function","scope":"global"},{"comment":"/**\n* Perform final persistance before leaving app.\n*/","meta":{"range":[9491,9544],"filename":"Ingredibot_DB.js","lineno":275,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000928","name":"shutdown","type":"FunctionDeclaration","paramnames":[]}},"description":"Perform final persistance before leaving app.","name":"shutdown","longname":"shutdown","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Turn Ingredient into a reconciled DB_Info ingredient object\n* @param ingredient\n*/","meta":{"range":[9680,13131],"filename":"Ingredibot_DB.js","lineno":284,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100000941","name":"reconcileIngredient","type":"FunctionDeclaration","paramnames":["ingredient"]},"vars":{"out":"reconcileIngredient~out","out.name":"reconcileIngredient~out.name","out.unit":"reconcileIngredient~out.unit","out.qty":"reconcileIngredient~out.qty","":null}},"description":"Turn Ingredient into a reconciled DB_Info ingredient object","params":[{"name":"ingredient"}],"name":"reconcileIngredient","longname":"reconcileIngredient","kind":"function","scope":"global"},{"comment":"/**\n* Lookup data on a food item by its fdcID\n* @param fdcId Food Data Central Identifier obtained previously\n* @return {Promise<any>} USDA Food Data Central data response (see usda food central site for more info)\n*/","meta":{"range":[651,1080],"filename":"USDA.js","lineno":16,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100001431","name":"lookupFood","type":"FunctionDeclaration","paramnames":["fdcId"]},"vars":{"":null}},"description":"Lookup data on a food item by its fdcID","params":[{"description":"Food Data Central Identifier obtained previously","name":"fdcId"}],"returns":[{"type":{"names":["Promise.<any>"]},"description":"USDA Food Data Central data response (see usda food central site for more info)"}],"name":"lookupFood","longname":"lookupFood","kind":"function","scope":"global"},{"comment":"/**\n* Find data on a food items that match the given name/description string\n* @param {string} name Ingredient name\n* @return {Promise<any>} USDA Food Data Central data response (see usda food central site for more info)\n*/","meta":{"range":[1342,1759],"filename":"USDA.js","lineno":39,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100001488","name":"findFoodByName","type":"FunctionDeclaration","paramnames":["name"]},"vars":{"":null}},"description":"Find data on a food items that match the given name/description string","params":[{"type":{"names":["string"]},"description":"Ingredient name","name":"name"}],"returns":[{"type":{"names":["Promise.<any>"]},"description":"USDA Food Data Central data response (see usda food central site for more info)"}],"name":"findFoodByName","longname":"findFoodByName","kind":"function","scope":"global"},{"comment":"/**\n* Call upon the Zestful API to parse an recipe ingredient line.\n*\n* @param {string[]} ingredientLines Lines from the recipe to be parsed\n* @return {DB_Info[]} Array of corresponding parsed data\n*/","meta":{"range":[644,1926],"filename":"Zestful.js","lineno":17,"columnno":0,"path":"/build/src/Cloud","code":{"id":"astnode100001599","name":"parseLines","type":"FunctionDeclaration","paramnames":["ingredientLines"]},"vars":{"ingredients":"parseLines~ingredients","":null}},"description":"Call upon the Zestful API to parse an recipe ingredient line.","params":[{"type":{"names":["Array.<string>"]},"description":"Lines from the recipe to be parsed","name":"ingredientLines"}],"returns":[{"type":{"names":["Array.<DB_Info>"]},"description":"Array of corresponding parsed data"}],"name":"parseLines","longname":"parseLines","kind":"function","scope":"global"},{"comment":"/**\n* Conduct the process of importing ingredients into the DB from a recipe URL\n* @param {string} url Recipe page url\n* @return {Promise<any>>} Promise resolves when done\n*/","meta":{"range":[526,1593],"filename":"index.js","lineno":14,"columnno":0,"path":"/build/src","code":{"id":"astnode100001820","name":"builder","type":"FunctionDeclaration","paramnames":["url"]},"vars":{"":null}},"description":"Conduct the process of importing ingredients into the DB from a recipe URL","params":[{"type":{"names":["string"]},"description":"Recipe page url","name":"url"}],"returns":[{}],"name":"builder","longname":"builder","kind":"function","scope":"global"},{"comment":"/**\n* Used to help analyse our parsing versus that which was done by Zestful so that we can potentially improve\n* our effectiveness there.\n* @param ingr\n* @param zInfo\n*/","meta":{"range":[1770,2602],"filename":"index.js","lineno":42,"columnno":0,"path":"/build/src","code":{"id":"astnode100001973","name":"compareParsing","type":"FunctionDeclaration","paramnames":["ingr","zInfo"]},"vars":{"text":"compareParsing~text","problems":"compareParsing~problems","syn":"compareParsing~syn"}},"description":"Used to help analyse our parsing versus that which was done by Zestful so that we can potentially improve\nour effectiveness there.","params":[{"name":"ingr"},{"name":"zInfo"}],"name":"compareParsing","longname":"compareParsing","kind":"function","scope":"global"},{"comment":"/* (do not emit documentation)\n* Call to log an exception.\n* may pass an exception only, or message and exception\n* Exception is logged with stack information.\n*\n* @param {string|Error} optmsg Optionsl message to pass, or just the exception\n* @param {Error} [e] Exception to log.\n*/","meta":{"range":[1364,1839],"filename":"logger.js","lineno":44,"columnno":0,"path":"/build/src","code":{"id":"astnode100002318","name":"logger.exception","type":"FunctionExpression","paramnames":["optmsg","e"]},"vars":{"e":"logger.exception~e","optmsg":"logger.exception~optmsg","message":"logger.exception~message","stackArray":"logger.exception~stackArray","where":"logger.exception~where"}},"undocumented":true,"name":"exception","longname":"logger.exception","kind":"function","memberof":"logger","scope":"static"},{"comment":"/**\n* PromiseLoop worker function\n*  (think of as `Promise.each(...)`) but it's not the Bluebird version\n* @param {any[]} listToProcess\n* @param {ProcessFunction} functionToCall Must return a promise that will update the intermediate accumulator\n*/","meta":{"range":[357,791],"filename":"promiseLoop.js","lineno":10,"columnno":0,"path":"/build/src","code":{"id":"astnode100002435","name":"execute","type":"FunctionDeclaration","paramnames":["listToProcess","functionToCall"]},"vars":{"end":"execute~end","result":"execute~result","recurser":"execute~recurser","":null}},"description":"PromiseLoop worker function\n (think of as `Promise.each(...)`) but it's not the Bluebird version","params":[{"type":{"names":["Array.<any>"]},"name":"listToProcess"},{"type":{"names":["ProcessFunction"]},"description":"Must return a promise that will update the intermediate accumulator","name":"functionToCall"}],"name":"execute","longname":"execute","kind":"function","scope":"global"},{"comment":"/**\n* unitModifier represents the `modifiers` array as a space-delimited string\n* mostly for legacy reasons.\n*/","meta":{"range":[1081,1161],"filename":"Ingredient.js","lineno":29,"columnno":8,"path":"/build/src/Spatula","code":{"id":"astnode100002717","name":"get","type":"FunctionExpression"}},"description":"unitModifier represents the `modifiers` array as a space-delimited string\nmostly for legacy reasons.","name":"get","longname":"get","kind":"function","scope":"global"},{"comment":"/**\n* Used to replace unicode so-called 'vulgar fraction' characters into full numerical fraction notation\n* that is parseable above.\n* @param {string} text String that may contain fraction characters\n* @return {string} expanded version of the string with character replaced by notation.\n*/","meta":{"range":[6928,7723],"filename":"Ingredient.js","lineno":173,"columnno":0,"path":"/build/src/Spatula","code":{"id":"astnode100003515","name":"vulgarFractionReplacer","type":"FunctionDeclaration","paramnames":["text"]},"vars":{"vftable":"vulgarFractionReplacer~vftable","":null}},"description":"Used to replace unicode so-called 'vulgar fraction' characters into full numerical fraction notation\nthat is parseable above.","params":[{"type":{"names":["string"]},"description":"String that may contain fraction characters","name":"text"}],"returns":[{"type":{"names":["string"]},"description":"expanded version of the string with character replaced by notation."}],"name":"vulgarFractionReplacer","longname":"vulgarFractionReplacer","kind":"function","scope":"global"},{"comment":"/**\n* Read a web page that describes a recipe and that has a `schema.org` `Recipe` type schema within it.\n*\n* @param {string} url Address of the recipe web page\n* @return {string} html text of the page source\n*/","meta":{"range":[1563,1806],"filename":"Schema.js","lineno":42,"columnno":0,"path":"/build/src/Spatula","code":{"id":"astnode100005017","name":"readRecipePage","type":"FunctionDeclaration","paramnames":["url"]},"vars":{"":null}},"description":"Read a web page that describes a recipe and that has a `schema.org` `Recipe` type schema within it.","params":[{"type":{"names":["string"]},"description":"Address of the recipe web page","name":"url"}],"returns":[{"type":{"names":["string"]},"description":"html text of the page source"}],"name":"readRecipePage","longname":"readRecipePage","kind":"function","scope":"global"},{"comment":"/**\n* accepts page data ( as from `readRecipePage`) and extracts LD+JSON blocks\n* from it.  These may or may not be Recipe blocks, but will be LD+JSON segments.\n* @param {string} pageData\n* @return {string[]} Array of extracted block text\n*\n*/","meta":{"range":[2057,3259],"filename":"Schema.js","lineno":59,"columnno":0,"path":"/build/src/Spatula","code":{"id":"astnode100005049","name":"findRecipeBlocks","type":"FunctionDeclaration","paramnames":["pageData"]},"vars":{"blocks":"findRecipeBlocks~blocks","start":"findRecipeBlocks~start","done":"findRecipeBlocks~done","ldScriptStart":"findRecipeBlocks~ldScriptStart","bs":"findRecipeBlocks~bs","ld":"findRecipeBlocks~ld","bse":"findRecipeBlocks~bse","be":"findRecipeBlocks~be","lds":"findRecipeBlocks~lds","":null}},"description":"accepts page data ( as from `readRecipePage`) and extracts LD+JSON blocks\nfrom it.  These may or may not be Recipe blocks, but will be LD+JSON segments.","params":[{"type":{"names":["string"]},"name":"pageData"}],"returns":[{"type":{"names":["Array.<string>"]},"description":"Array of extracted block text"}],"name":"findRecipeBlocks","longname":"findRecipeBlocks","kind":"function","scope":"global"},{"comment":"/**\n* Attempts to parse a LD+JSON block as a Recipe object.\n* Parsed Recipe will include Ingredient elements in `ingredientList` that has first-level (unreconciled)\n* parsing done to determine name and quqntity.\n* @param block\n*/","meta":{"range":[3495,5992],"filename":"Schema.js","lineno":106,"columnno":0,"path":"/build/src/Spatula","code":{"id":"astnode100005212","name":"blockToRecipe","type":"FunctionDeclaration","paramnames":["block"]},"vars":{"recipe":"blockToRecipe~recipe","schemaOK":"blockToRecipe~schemaOK","graphArray":"blockToRecipe~graphArray","i":"blockToRecipe~i","tb":"blockToRecipe~tb","recipe.name":"blockToRecipe~recipe.name","recipe.url":"blockToRecipe~recipe.url","recipe.author":"blockToRecipe~recipe.author","recipe.publisherInfo":"blockToRecipe~recipe.publisherInfo","recipe.datePublished":"blockToRecipe~recipe.datePublished","recipe.dateModified":"blockToRecipe~recipe.dateModified","recipe.cuisine":"blockToRecipe~recipe.cuisine","recipe.category":"blockToRecipe~recipe.category","recipe.keywords":"blockToRecipe~recipe.keywords","recipe.image":"blockToRecipe~recipe.image","recipe.description":"blockToRecipe~recipe.description","recipe.numComments":"blockToRecipe~recipe.numComments","recipe.prepTime":"blockToRecipe~recipe.prepTime","recipe.cookTime":"blockToRecipe~recipe.cookTime","recipe.totalTime":"blockToRecipe~recipe.totalTime","recipe.servings":"blockToRecipe~recipe.servings","ingredients":"blockToRecipe~ingredients","ingText":"blockToRecipe~ingText","recipe.ingredientList":"blockToRecipe~recipe.ingredientList","steps":"blockToRecipe~steps","step":"blockToRecipe~step","recipe.instructions":"blockToRecipe~recipe.instructions"}},"description":"Attempts to parse a LD+JSON block as a Recipe object.\nParsed Recipe will include Ingredient elements in `ingredientList` that has first-level (unreconciled)\nparsing done to determine name and quqntity.","params":[{"name":"block"}],"name":"blockToRecipe","longname":"blockToRecipe","kind":"function","scope":"global"},{"comment":"/**\n* Extract the Recipe object(s) from a web page recipe article\n* @param url Url of the recipe browser page\n* @return {Promise<Recipe[]>} an array with the recipes found on this page (usually only one)\n*/","meta":{"range":[6204,6703],"filename":"Schema.js","lineno":177,"columnno":0,"path":"/build/src/Spatula","code":{"id":"astnode100005601","name":"scrape","type":"FunctionDeclaration","paramnames":["url"]},"vars":{"recipes":"scrape~recipes","":null}},"description":"Extract the Recipe object(s) from a web page recipe article","params":[{"description":"Url of the recipe browser page","name":"url"}],"returns":[{"type":{"names":["Promise.<Array.<Recipe>>"]},"description":"an array with the recipes found on this page (usually only one)"}],"name":"scrape","longname":"scrape","kind":"function","scope":"global"}]}